{"version":3,"sources":["utils/index.ts","components/Button/Button.tsx","components/RefreshButton/RefreshButton.tsx","components/TemperatureUnitsControl/TemperatureUnitsControl.tsx","api/index.ts","store/slices/weatherData/weatherDataSlice.ts","components/WeatherCard/WeatherCard.tsx","components/WeatherCardsContainer/WeatherCardsContainer.tsx","store/slices/pages/pageSlice.ts","store/slices/temperatureUnit/temperatureUnitSlice.ts","components/Loading/Loading.tsx","components/Chart/MyChart.tsx","components/WeatherInfo/WeatherInfo.tsx","store/index.ts","App.tsx","index.tsx"],"names":["formatTemperature","fehernhiteTemp","unit","celsius","groupByDay","list","groups","forEach","listItem","day","moment","dt_txt","format","hours","Object","values","Button","children","onClick","disabled","className","RefreshButton","refreshWeatherData","TemperatureUnitsControl","temperatureUnit","updateTemperatureUnit","isCelsius","isFehernhite","type","value","id","checked","onChange","htmlFor","WEATHER_APP_API_KEY","http","url","a","fetch","initial","status","Error","statusText","json","getWeatherData","city","response","fetchWeatherInfo","createAsyncThunk","weatherDataSlice","createSlice","name","initialState","data","loading","selectedDayData","error","reducers","startLoading","state","endLoading","setWeatherData","action","payload","selectDay","setError","console","log","actions","WeatherCard","props","temperature","date","dispatch","useDispatch","length","WeatherCardsContainer","weatherData","page","nextPage","prevPage","pageSize","slice","map","averageTemperature","main","temp","toFixed","reduce","acc","hour","getAverageTemperature","dt","Math","floor","pageSlice","increment","decrement","setPageSize","temperatureUnitSlice","setUnitToCelsius","setUnitToFahernhite","Loading","color","height","width","MyChart","useSelector","formattedData","item","ResponsiveContainer","minHeight","BarChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Bar","fill","WeatherInfo","useWindowSize","useEffect","fetchWeatherData","unwrapResult","unwrapedData","groupedData","message","memoizedFetchData","useCallback","fd","e","target","store","configureStore","reducer","pageReducer","temperatureUnitReducer","weatherDataReducer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36c110b0.chunk.js","sourcesContent":["import moment from \"moment\";\nimport { TemperatureUnit, WeatherListItem } from \"../types\";\n\nexport const formatTemperature = (\n  fehernhiteTemp: number,\n  unit: TemperatureUnit\n) => {\n  const celsius = fehernhiteTemp - 273.15;\n  if (unit === \"celsius\") {\n    return celsius;\n  }\n  return celsius * (9 / 5) + 32;\n};\n\nexport const displayUnit = (unit: TemperatureUnit) => {\n  if (unit === \"celsius\") {\n    return \"°C\";\n  } else {\n    return \"°F\";\n  }\n};\n\nexport const groupByDay = (list: WeatherListItem[] = []) => {\n  let groups: any = {};\n  list.forEach((listItem) => {\n    const day = moment(listItem.dt_txt).format(\"L\");\n    if (!groups[day]) {\n      groups[day] = { ...listItem, hours: [] };\n    } else {\n      groups[day] = { ...listItem, hours: [...groups[day].hours, listItem] };\n    }\n  });\n\n  return Object.values(groups);\n};\n\ntype ListItemWithHours = WeatherListItem & { hours: WeatherListItem[] };\n\nexport const getAverageTemperature = (\n  day: ListItemWithHours,\n  unit: TemperatureUnit\n): string => {\n  const hours = day.hours;\n  if (hours.length === 0)\n    return formatTemperature(day.main.temp, unit).toFixed(2);\n\n  const sum = hours.reduce((acc: number, hour) => {\n    acc = acc + hour.main.temp;\n    return acc;\n  }, 0);\n  const averageTemperature = sum / hours.length;\n  return formatTemperature(averageTemperature, unit).toFixed(2);\n};\n","import React from \"react\";\n\nconst Button = ({\n  children,\n  onClick,\n  disabled,\n  className,\n}: {\n  children: React.ReactNode;\n  onClick?: Function | undefined;\n  disabled?: boolean;\n  className?: string;\n}) => {\n  return (\n    <button\n      className={`px-4 py-2 bg-blue-500 text-white rounded-md disabled:opacity-20 ${className}`}\n      onClick={() => onClick?.()}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import Button from \"../Button/Button\";\n\ntype RefreshButtonProps = {\n  refreshWeatherData: Function;\n};\nconst RefreshButton = ({ refreshWeatherData }: RefreshButtonProps) => {\n  return (\n    <Button className=\"m-10\" onClick={refreshWeatherData}>\n      Refresh\n    </Button>\n  );\n};\n\nexport default RefreshButton;\n","import { ChangeEventHandler } from \"react\";\nimport { TemperatureUnit } from \"../../types\";\n\ntype TemperatureUnitsControlProps = {\n  temperatureUnit: TemperatureUnit;\n  updateTemperatureUnit: ChangeEventHandler<HTMLInputElement>;\n};\nconst TemperatureUnitsControl = ({\n  temperatureUnit,\n  updateTemperatureUnit,\n}: TemperatureUnitsControlProps) => {\n  const isCelsius = temperatureUnit === \"celsius\";\n  const isFehernhite = temperatureUnit === \"fehrenhite\";\n  return (\n    <div className=\"flex justify-center items-center my-5\">\n      <div>\n        <input\n          type=\"radio\"\n          value=\"celsius\"\n          id=\"celsius\"\n          className=\"appearance-none\"\n          checked={temperatureUnit === \"celsius\"}\n          onChange={updateTemperatureUnit}\n        />\n        <label\n          className={`rounded-l-md py-2 px-4 text-white  ${\n            isCelsius ? \"bg-blue-500\" : \"bg-gray-400\"\n          }`}\n          htmlFor=\"celsius\"\n        >\n          Celsius\n        </label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          value=\"fehrenhite\"\n          id=\"fehrenhite\"\n          className=\"appearance-none\"\n          checked={temperatureUnit === \"fehrenhite\"}\n          onChange={updateTemperatureUnit}\n        />\n        <label\n          className={`rounded-r-md py-2 px-4 text-white  ${\n            isFehernhite ? \"bg-blue-500\" : \"bg-gray-400\"\n          }`}\n          htmlFor=\"fehrenhite\"\n        >\n          Fahrenheit\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default TemperatureUnitsControl;\n","const WEATHER_APP_API_KEY = \"f4419d8c292d14b972ab65ba162602b5\";\n\nconst http = async (url: string) => {\n  try {\n    const initial = await fetch(url);\n    if (initial.status >= 400 && initial.status < 600) {\n      throw new Error(initial.statusText);\n    }\n    return await initial.json();\n  } catch (e) {\n    throw new Error(e);\n  }\n};\n\nconst getWeatherData = async (city = \"Munich\") => {\n  const response = await http(\n    `http://api.openweathermap.org/data/2.5/forecast?q=${city},de&APPID=${WEATHER_APP_API_KEY}&cnt=40`\n  );\n  return response;\n};\n\nexport { getWeatherData };\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getWeatherData } from \"../../../api\";\nimport { WeatherListItem } from \"../../../types\";\n\nexport interface WeatherDataSliceType {\n  data: (WeatherListItem & { hours: WeatherListItem })[];\n  loading: boolean;\n  selectedDayData: null | WeatherListItem[];\n  error: string | null;\n}\n\nconst initialState: WeatherDataSliceType = {\n  data: [],\n  loading: false,\n  selectedDayData: null,\n  error: null,\n};\n\nexport const fetchWeatherInfo = createAsyncThunk(\n  \"weather/fetchAll\",\n  async () => {\n    try {\n      const response = await getWeatherData();\n      return response;\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n);\n\nexport const weatherDataSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    startLoading: (state) => {\n      state.loading = true;\n    },\n    endLoading: (state) => {\n      state.loading = false;\n    },\n    setWeatherData: (state, action) => {\n      state.data = action.payload;\n    },\n    selectDay: (state, action) => {\n      state.selectedDayData = action.payload;\n    },\n    setError: (state, action) => {\n      console.log(state, action);\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { startLoading, endLoading, setWeatherData, selectDay, setError } =\n  weatherDataSlice.actions;\n\nexport default weatherDataSlice.reducer;\n","import moment from \"moment\";\nimport { useDispatch } from \"react-redux\";\nimport { TemperatureUnit, WeatherListItem } from \"../../types/index\";\nimport { displayUnit } from \"../../utils\";\n\nimport { selectDay } from \"../../store/slices/weatherData/weatherDataSlice\";\n\nconst WeatherCard = (props: {\n  temperatureUnit: TemperatureUnit;\n  temperature: string;\n  date: string;\n  hours: WeatherListItem[];\n}) => {\n  const { temperature, temperatureUnit, date, hours } = props;\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"rounded-md p-5 flex flex-col items-center shadow-md  text-white bg-gradient-to-r\tfrom-blue-900 to-blue-800 m-2\">\n      <p className=\"text-sm mb-3\">{moment(date).format(\"LL\")}</p>\n      <div className=\"flex items-start\">\n        <span className=\"text-4xl\">{temperature}</span>\n        <span className=\"text-sm\">{displayUnit(temperatureUnit)}</span>\n      </div>\n      {hours.length > 0 ? (\n        <span\n          className=\"underline\"\n          onClick={() => {\n            dispatch(selectDay(hours));\n          }}\n        >\n          Hours breakdown\n        </span>\n      ) : null}\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","import moment from \"moment\";\nimport { MouseEventHandler } from \"react\";\nimport { TemperatureUnit, WeatherListItem } from \"../../types\";\nimport { getAverageTemperature } from \"../../utils\";\nimport Button from \"../Button/Button\";\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\n\ntype WeatherCardsContainerProps = {\n  weatherData: any;\n  temperatureUnit: TemperatureUnit;\n  page: number;\n  nextPage: MouseEventHandler<HTMLButtonElement>;\n  prevPage: MouseEventHandler<HTMLButtonElement>;\n  pageSize: number;\n};\nconst WeatherCardsContainer = ({\n  weatherData,\n  temperatureUnit,\n  page,\n  nextPage,\n  prevPage,\n  pageSize,\n}: WeatherCardsContainerProps) => {\n  const weatherDataSlice =\n    weatherData.slice((page - 1) * pageSize, pageSize * page) || [];\n  return (\n    <div>\n      <div className=\"flex justify-center\tw-full my-5\">\n        {weatherDataSlice.map(\n          (listItem: WeatherListItem & { hours: WeatherListItem[] }) => {\n            const averageTemperature = getAverageTemperature(\n              listItem,\n              temperatureUnit\n            );\n            return (\n              <WeatherCard\n                key={listItem.dt}\n                temperature={averageTemperature}\n                temperatureUnit={temperatureUnit}\n                hours={listItem.hours}\n                date={moment(listItem.dt_txt).format(\"L\")}\n              />\n            );\n          }\n        )}\n      </div>\n      {weatherData.length > 0 ? (\n        <div className=\"flex justify-center items-center\">\n          <Button onClick={prevPage} disabled={page === 1}>\n            Prev\n          </Button>\n          <span className=\"mx-3\">\n            {page} / {Math.floor(weatherData.length / pageSize)}\n          </span>\n          <Button\n            disabled={page === Math.floor(weatherData.length / pageSize)}\n            onClick={nextPage}\n          >\n            Next\n          </Button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default WeatherCardsContainer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport interface pageState {\n  pageSize: number;\n  page: number;\n}\n\nconst initialState: pageState = {\n  pageSize: 0,\n  page: 1,\n};\n\nexport const pageSlice = createSlice({\n  name: \"page\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.page++;\n    },\n    decrement: (state) => {\n      state.page--;\n    },\n    setPageSize: (state, action) => {\n      state.pageSize = action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, setPageSize } = pageSlice.actions;\n\nexport default pageSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { TemperatureUnit } from \"../../../types/index\";\n\nexport interface temperatureUnit {\n  unit: TemperatureUnit;\n}\n\nconst initialState: temperatureUnit = {\n  unit: \"celsius\",\n};\n\nexport const temperatureUnitSlice = createSlice({\n  name: \"temperature\",\n  initialState,\n  reducers: {\n    setUnitToCelsius: (state) => {\n      state.unit = \"celsius\";\n    },\n    setUnitToFahernhite: (state) => {\n      state.unit = \"fehrenhite\";\n    },\n  },\n});\n\nexport const { setUnitToCelsius, setUnitToFahernhite } =\n  temperatureUnitSlice.actions;\n\nexport default temperatureUnitSlice.reducer;\n","import ReactLoading from \"react-loading\";\n\nconst Loading = () => (\n  <div className=\"h-screen flex justify-center items-center\">\n    <ReactLoading type=\"spin\" color=\"grey\" height={100} width={100} />\n  </div>\n);\n\nexport default Loading;\n","import moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer } from \"recharts\";\nimport { selectDay } from \"../../store/slices/weatherData/weatherDataSlice\";\nimport { RootState } from \"../../store\";\nimport { formatTemperature } from \"../../utils\";\n\nconst MyChart = () => {\n  const { selectedDayData } = useSelector(\n    (state: RootState) => state.weatherData\n  );\n  const { unit } = useSelector((state: RootState) => state.temperatureUnit);\n\n  const dispatch = useDispatch();\n\n  const formattedData = (selectedDayData || []).map((item) => {\n    return {\n      name: moment(item.dt_txt).format(\"hh A\"),\n      temp: formatTemperature(item.main.temp, unit),\n      day: moment(item.dt_txt).format(\"LL\"),\n    };\n  });\n\n  return (\n    <div>\n      {formattedData.length > 0 ? (\n        <div>\n          <div className=\"w-screen flex flex-col items-center\">\n            <h1 className=\"my-3 flex flex-col\">\n              <span>{formattedData[0].day}</span>\n              <span\n                className=\"text-blue-900 text-center underline \"\n                onClick={() => dispatch(selectDay(null))}\n              >\n                CLOSE\n              </span>\n            </h1>\n            <div className=\"flex flex-col items-stretch w-80\">\n              <ResponsiveContainer width=\"100%\" minHeight={300}>\n                <BarChart\n                  data={formattedData}\n                  margin={{\n                    top: 5,\n                    right: 30,\n                    left: 20,\n                    bottom: 5,\n                  }}\n                >\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Bar dataKey=\"temp\" fill=\"#8884d8\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default MyChart;\n","import { useCallback, useEffect } from \"react\";\nimport { TemperatureUnit } from \"../../types\";\nimport { groupByDay } from \"../../utils\";\nimport RefreshButton from \"../RefreshButton/RefreshButton\";\nimport TemperatureUnitsControl from \"../TemperatureUnitsControl/TemperatureUnitsControl\";\nimport WeatherCardsContainer from \"../WeatherCardsContainer/WeatherCardsContainer\";\n\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport {\n  decrement,\n  increment,\n  setPageSize,\n} from \"../../store/slices/pages/pageSlice\";\n\nimport {\n  setUnitToCelsius,\n  setUnitToFahernhite,\n} from \"../../store/slices/temperatureUnit/temperatureUnitSlice\";\nimport {\n  fetchWeatherInfo,\n  startLoading,\n  setWeatherData,\n  endLoading,\n  setError,\n} from \"../../store/slices/weatherData/weatherDataSlice\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport Loading from \"../Loading/Loading\";\nimport MyChart from \"../Chart/MyChart\";\n\nconst WeatherInfo = () => {\n  const [width] = useWindowSize();\n  const { page, pageSize } = useSelector((state: RootState) => state.page);\n  const { unit } = useSelector((state: RootState) => state.temperatureUnit);\n  const {\n    data: weatherData = [],\n    loading,\n    error,\n  } = useSelector((state: RootState) => state.weatherData);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (width > 700) {\n      dispatch(setPageSize(3));\n    } else {\n      dispatch(setPageSize(1));\n    }\n  }, [width, dispatch]);\n\n  const fetchWeatherData = async () => {\n    try {\n      dispatch(startLoading());\n      const data = await dispatch(fetchWeatherInfo());\n      //@ts-ignore\n      const unwrapedData = await unwrapResult(data);\n\n      const groupedData = groupByDay(unwrapedData?.list ?? []);\n\n      dispatch(setWeatherData(groupedData));\n\n      dispatch(endLoading());\n    } catch (e) {\n      dispatch(endLoading());\n      dispatch(setError(e.message));\n    }\n  };\n\n  const memoizedFetchData = useCallback(fetchWeatherData, [dispatch]);\n\n  useEffect(() => {\n    const fd = async () => {\n      await memoizedFetchData();\n    };\n    fd();\n  }, [dispatch, memoizedFetchData]);\n\n  return (\n    <div className=\"flex flex-col justify-center items-center p-2\">\n      <h3>Weather App</h3>\n      {loading && !error ? <Loading /> : null}\n      {!loading && !error ? (\n        <div className=\"flex flex-col items-center\">\n          <TemperatureUnitsControl\n            temperatureUnit={unit}\n            updateTemperatureUnit={(e) => {\n              const temp = e.target.value as TemperatureUnit;\n              if (temp === \"celsius\") {\n                dispatch(setUnitToCelsius());\n              } else {\n                dispatch(setUnitToFahernhite());\n              }\n            }}\n          />\n          <WeatherCardsContainer\n            temperatureUnit={unit}\n            weatherData={weatherData}\n            page={page}\n            pageSize={pageSize}\n            nextPage={() => dispatch(increment())}\n            prevPage={() => dispatch(decrement())}\n          />\n          <MyChart />\n        </div>\n      ) : null}\n      {!loading ? (\n        <RefreshButton\n          refreshWeatherData={() => {\n            dispatch(setError(null));\n            fetchWeatherData();\n          }}\n        />\n      ) : null}\n      {error ? (\n        <p className=\"text-red-500 text-lg  text-center\">{error}</p>\n      ) : null}\n    </div>\n  );\n};\n\nexport default WeatherInfo;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport pageReducer from \"./slices/pages/pageSlice\";\nimport temperatureUnitReducer from \"./slices/temperatureUnit/temperatureUnitSlice\";\nimport weatherDataReducer from \"./slices/weatherData/weatherDataSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    page: pageReducer,\n    temperatureUnit: temperatureUnitReducer,\n    weatherData: weatherDataReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import { Provider } from \"react-redux\";\nimport \"./App.css\";\nimport WeatherInfo from \"./components/WeatherInfo/WeatherInfo\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <div className=\"App weather-app\">\n      <Provider store={store}>\n        <WeatherInfo />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}